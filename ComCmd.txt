PS C:\Users\Student> function SettingParam
>> {
>> param ($one=9)
>> $one + 1
>> }
<# Runs a basic function that adds the one variable to the int one.  
## The function must be reran/retyped out in order to change the variable
## You cannot sub in a number for $one as so
PS C:\> $a = 1 and call function and expect proper result.  
## Result will be the same as previous.

PS C:\Users\Student>  function SettingParam
>>  {
>>  param ($one)
>>  $one + 1
>>  }

PS C:\> SettingParam -one 5
6

<# The following function sets the parameter a different way #>

## PS C:\Users\Student> SettingParam "NewOne"
## NewOne1
## PS C:\Users\Student> SettingParam 'NewOne'
## NewOne1

<#This function appends a string to the int#>

PS C:\Users\Student> SettingParam 'NewOne"
>>          " '
NewOne"
         " 1
## Messing with the spacing

#####Positional Parameters#####
A position parameter is a parameter without a prameter name.  
PS uses the parameter value order to associate each parameter value with
a parameter in the function.
PS C:\Users\Student> function NuPosPara {
>> $arg  = $args[0]
>> $arg1 = $args[1]
>> $arg
>> $arg1
>> }
## Whatever the value in the first position of the parameter list
## will be saved and display in the $arg variable and whatever the value in the
## second position of the parameter list will be saved and displayed in the second value

PS C:\Users\Student> function NuPosPara {
>> $arg  = $args[0]
>> $arg1 = $args[1]
>> $arg
>> $arg1
>> }


PS C:\Users\Student> NuPosPara 10 100
10
100
PS C:\Users\Student> NuPosPara 100 10
100
10
PS C:\Users\Student> NuPosPara "FirstTry" , "SecondTry"
FirstTry
SecondTry
PS C:\Users\Student> NuPosPara "2FirstTry" , "1SecondTry"
2FirstTry
1SecondTry

Write-Host "This is a test." @Colors
Write-Host @Colors "This is another test."
This is a test.
##suppose to be in black



$args
##Contains an array of values for undeclared parameters that are passed to a function script
##script or script block.  In an event action, the $Args variable contains objects 
##that represent the event arguments of the event that is being processed.  This variable is populated
##only within the Action block of an event registration command.
##
Splatting Command Parameters
##You can use splatting to represent the parameters of a command
##To splat the parameters of a command, use @Args to represent the 
##command parameters.  This technique is easier then enumeration command
##parameters and it works w/o revision even if the parameters 
##of the called command change

function Get-MyProcess { Get-Process @Args }
Get-MyProcess -name module 
  Size(K) ModuleName                                         FileName
   ------- ----------                                         --------
        80 ApplicationFrameHost.exe                           C:\Windows\system32\ApplicationFrameHost.exe
      1984 ntdll.dll                                          C:\Windows\SYSTEM32\ntdll.dll
       712 KERNEL32.DLL                                       C:\Windows\System32\KERNEL32.DLL
      2700 KERNELBASE.dll                                     C:\Windows\System32\KERNELBASE.dll
       632 msvcrt.dll                                         C:\Windows\System32\msvcrt.dll
      3288 combase.dll                                        C:\Windows\System32\combase.dll
      1000 ucrtbase.dll                                       C:\Windows\System32\ucrtbase.dll
      1152 RPCRT4.dll                                         C:\Windows\System32\RPCRT4.dll
       512 bcryptPrimitives.dll                               C:\Windows\System32\bcryptPrimitives.dll
       
       ###SimpleFunctions###
Function WP {
Param($String1)
$String1
}
#You create a function WP
#with the Param $String1
You then output $String1

WP -String1 asdf
asdf

You are calling the function WP 
for the parameter String1 you are 
assigning asdf, you then output
string1 which is asdf


